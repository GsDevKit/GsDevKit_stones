#!/usr/bin/env superdoit_solo
usage
-----
USAGE $basename [--help | -h] [--debug | -D]  [--debugGem] [ <registry-name> ]

DESCRIPTION
  Create GsDevKit_stones registry for the given . If no <registry-name> is 
  specified, /usr/bin/hostname is used. A registry is created in 
  $STONES_DATA_HOME/gsdevkit_stones/registry, where the default value of 
  $STONES_DATA_HOME is $XDG_DATA_HOME, if defined and $HOME/.local.share, if not. 

  GDKRegistry {
    'lathe' : '/home/dhenrich/.local/share/gsdevkit_stones/registry/lathe.ston',
    'bosch' : '/home/dhenrich/.local/share/gsdevkit_stones/registry/bosch.ston'
  }

The registry.ston file maps the name of the registry to a <registry-name>.ston file that contains the _stones meta data for the name registry:

  GDKStonesRegistry {
    #name : 'bosch',
    #stones : { },
    #sessions : { },
    #templates : { }
  }

OPTIONS
  -h, --help        display usage message
  -D, --debug       bring up topaz debugger in the event of a script error
  --debugGem        If terminal is connected to stdout, bring up debugger. If not,
                    dump stack to stdout and wait for topaz to attach using topaz
                    DEBUGGEM command.
  <registry-name>   name of the registry. Default is /usr/bin/hostname

EXAMPLES
  $basename --help
  $basename -D
  $basename --debugGem
  $basename 
  $basename bosch
-----
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'GsDevKit_stones',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core',
		'Solo'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'Globals'
			}
		}
	},
	#comment : ''
}
]
%
doit
	| registryName registryClass |
	self preDoitSpecLoad: [:spec |
		spec projectsHome: self dirname asFileReference parent parent].
	registryClass := (self globalNamed: 'GDKRegistry').	
	registryName := self positionalArgs size = 0
		ifTrue: [ (self globalNamed: 'System') hostname ]
	  ifFalse: [ self positionalArgs at: 1 ].
	^ registryClass newRegistryNamed: registryName
%
