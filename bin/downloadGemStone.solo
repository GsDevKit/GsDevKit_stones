#!/usr/bin/env superdoit_solo
options
{
SuperDoitOptionalOptionWithRequiredArg long: 'directory'.
SuperDoitOptionalOptionWithRequiredArg long: 'registry' short: 'r'.
}
%
Usage
-----
USAGE $basename [--help | -h] [--debug | -D]  [--debugGem] \
      [ --directory=<products-directory>  | [registry=<registry-name> | -r <registry-name>] ]\
      <gemstone-version> [ <server-dir-name> ]

DESCRIPTION
  Download and unzip the product tree for the given <gemstone-version> to the
  given <products-directory> or productDirectory defined by the <registry-name>.

OPTIONS
  -h, --help    display usage message
  -D, --debug   bring up topaz debugger in the event of a script error
  --debugGem    If terminal is connected to stdout, bring up debugger. If not,
                dump stack to stdout and wait for topaz to attach using topaz
                DEBUGGEM command.
  -f, --force   Delete the stone directory if it exists.
  -v, --verbose Verbose logging enabled.
  --directory=<products-directory>
                The directory where the product tree will be downloaded to.
                Either --directory or --registry must be specified.
  --registry=<registry-name> | -r <registry-name>]
                The product will be downloaded to the product 
                directory defined by the <registry-name> and it's location will
                be registered.  Either --directory or --registry must be specified.

EXAMPLES
  $basename --help
  $basename -D
  $basename --debugGem
  $basename --registry=bosch 3.6.4
  $basename -r bosch 3.7.0 3.7.0_rowanv3-Alpha1
  $basename --directory=$GS_HOME/shared/downloads/products 3.6.4 
-----
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'GsDevKit_stones',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core',
		'Solo'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'Globals'
			}
		}
	},
	#comment : ''
}
]
%
method
registryName
	^ self registry
		ifNil: [ (self globalNamed: 'System') hostname ]
		ifNotNil: [:value | value ].
%
method
downloadToRegistry: registryName version: productVersion productName: productName
	| registryClass stonesRegistry |
	registryClass := (self globalNamed: 'GDKRegistry').	
	stonesRegistry := registryClass stonesRegistryNamed: registryName.
	productVersion = productName
		ifTrue: [ stonesRegistry productNamed: productVersion ]
		ifFalse: [ 
			stonesRegistry
				productNamed: productName
				ifAbsent: [ 
					| productPath |
					productPath := self 
						downloadToDirectory: stonesRegistry productDirectory 
						version: productVersion 
						productName: productName.
					stonesRegistry products at: productName put: productPath ].
					stonesRegistry export ].
	^	self noResult
%
method
downloadToDirectory: directoryPath version: productVersion productName: productName
	| registryClass |
	registryClass := self globalNamed: 'GDKStonesRegistry'.
	^ registryClass
		downloadProductName: productName
		productVersion: productVersion
		to: directoryPath.	
%
doit
	| productVersion productName |
	"productName is name of product (alias), while productVersion is the actual 
		version of the project (base name of download file on ftp server)"
	self preDoitSpecLoad: [:spec | 
		spec projectsHome: self dirname asFileReference parent parent ].
	self positionalArgs size < 1
		ifTrue: [ self error: 'Missing required positional argument for GemStone version', ' (', self basename, ')' ]
		ifFalse: [ 
			self positionalArgs size = 1
				ifTrue: [ 
					productVersion := self positionalArgs at: 1.
					productName := productVersion ]
				ifFalse: [ 
					self positionalArgs size = 2
						ifTrue: [ 
							productVersion := self positionalArgs at: 1.
							productName := self positionalArgs at: 2 ] 
						ifFalse: [ self error: 'Only 1 or 2 positional arguments are allowed', ' (', self basename, ')' ] ] ].
	^ self registry
		ifNotNil: [:registryName |
			self directory
				ifNotNil: [ self error: 'one of --directoryName or --registryName must be specified, not both.', ' (', self basename, ')' ].
			self downloadToRegistry: registryName version: productVersion productName: productName.  ]
		ifNil: [
			self directory
				ifNil: [ 
					self registry ifNotNil: [ self error: 'one of --directoryName or --registryName must be specified, not both.', ' (', self basename, ')' ].
					self downloadToRegistry: self registryName version: productVersion productName: productName. ]
				ifNotNil: [:directoryPath |
					self downloadToDirectory: directoryPath version: productVersion productName: productName ] ].

%
