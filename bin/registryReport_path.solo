#!/usr/bin/env superdoit_solo
usage
-----
USAGE $basename [--help | -h] [--debug | -D] \
  [ 
    <registry-name> | \
    <registry-name>/projectSet.<projectSet-name> | \
    <registry-name>/stone.<stone-name> \
  ]

DESCRIPTION
  With no options, list the names of the existing registries.

OPTIONS
  -h, --help        display usage message
  -D, --debug       bring up topaz debugger in the event of a script error

EXAMPLES
  $basename --help
  $basename -D
  $basename 
  $basename bosch
  $basename bosch/projectSet:dev/loadSpecs:Rowan
-----
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'GsDevKit_stones',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core',
		'Solo'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'Globals'
			}
		}
	},
	#comment : ''
}
]
%
doit
	| config |
	self preDoitSpecLoad: [:spec |
		spec projectsHome: '/home/dhenrich/_git'].
	config := (self globalNamed: 'GDKConfiguration') instance.
	self registry
		ifNotNil: [:registryName |
			| registry |
			registry := config registryNamed: registryName.
			self projectSet 
				ifNil: [ ^ registry ]
				ifNotNil: [:projectSetName | 
					| projectSetPath |
					projectSetPath := registry 
						projectSetNamed: projectSetName 
						ifAbsent: [ 
							self error: ' No project set named: ', 
									projectSetName, ' found in the registry ', 
									registryName].
					^ (self globalNamed: 'GDKProjectSet') 
							fromPath: projectSetPath
							ifAbsent: [ self error: 'No file named', projectSetPath , ' found.' ] ] ].
	self projectSet ifNotNil: [ self error: 'a --registry is required to list the projectSet' ].
	config keys do: [:each | self stdout nextPutAll: each asString; lf ].
	^ self noResult
%
