#!/usr/bin/env superdoit_solo
options
{
SuperDoitOptionalOptionWithRequiredArg long: 'file'.
SuperDoitOptionalOptionWithRequiredArg long: 'registry'.
SuperDoitOptionalOptionWithRequiredArg long: 'stoneName'.
SuperDoitOptionalOptionWithNoArg long: 'verbose' short: 'v'.
}
%
Usage
-----
USAGE $basename [--help | -h] [--debug | -D]  [--debugGem] [-v | --verbose] \
                [--registry=<registry-name> --stoneName=<stone-name>] \
                [ <tode-command> | --file=<tode-commands-file> ]

DESCRIPTION
  Execute tODE commands in the stone and print the result. With no --registry
  and no --stoneName specified, the script must be executed in the target stone
  directory. 

OPTIONS
  -h, --help    display usage message
  -D, --debug   bring up topaz debugger in the event of a script error
  --debugGem    If terminal is connected to stdout, bring up debugger. If not,
                dump stack to stdout and wait for topaz to attach using topaz
                DEBUGGEM command.
  --registry=<registry-name>
                Name of registry used to look up stoneName.
  --stoneName=<stone-name>
                Name of stone to run script against.
  --file=<tode-commands-file>
                Name of file containing one or more tODE commands

EXAMPLES
  $basename --help
  $basename -D
  $basename --debugGem
# passing tests
  cat - > testing << EOF
eval \`TDTestToolTests enableTests: false\`
test --batch class TDTestToolTests
eval \`self hasFailures ifTrue: [ self error: 'FAILING' ] ifFalse: [ self ]\`
EOF
  $basename --file=testing
#failing tests
  cat - > testing << EOF
eval \`TDTestToolTests enableTests: true\`
test --batch class TDTestToolTests
eval \`self hasFailures ifTrue: [ self error: 'FAILING' ] ifFalse: [ self ]\`
EOF
  $basename --file=testing

  $basename 'eval `3+4`' --registry=issue_4 --stoneName=gs_370
  $basename "eval `3+4`"
-----
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'GsDevKit_stones',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core',
		'Solo'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'Globals'
			}
		}
	},
	#comment : ''
},
RwLoadSpecificationV2 {
	#projectName : 'GsCommands',
	#projectSpecFile : 'rowan/project.ston',
	#diskUrl : '$GEMSTONE/examples/GsCommands/projectsHome/GsCommands',
	#componentNames : [
		'Commands'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'UserGlobals'
			}
		}
	},
	#comment : ''
}
]
%
doit
	| registryClass stoneSpec sessionDescription commands result |
	self preDoitSpecLoad: [:spec | 
		spec projectName = 'GsCommands'
			ifTrue: [ spec projectsHome: '$GEMSTONE/examples/GsCommands/projectsHome' ]
			ifFalse: [ spec projectsHome: self dirname asFileReference parent parent ] ].
	registryClass := (self globalNamed: 'GDKRegistry').	
	self verbose
		ifTrue: [ (self globalNamed: 'GDKGsDevKit_stonesBase') verbose: true ].
	self registry
		ifNotNil: [:registryName |
			| stonesRegistry |
			self stoneName
				ifNil: [ self error: 'A --stoneName must be specified with --registry' ].
			stonesRegistry := registryClass stonesRegistryNamed: self registry.
			stoneSpec := stonesRegistry stoneNamed: self stoneName ] 
		ifNil: [
			| specFile |
			specFile := FileLocator workingDirectory asFileReference / '.GDKStoneSpec.ston'.
			stoneSpec := (self globalNamed: 'GDKAbstractRegistryStore') fromPath: specFile ifAbsent: [] ].
	sessionDescription := (self globalNamed: 'TDSessionDescription') 
		fromFile: stoneSpec todeHome asFileReference / 'sys' / 'local' / 'sessions' / stoneSpec stoneName.
	self positionalArgs size > 0
		ifTrue: [ 
			"workaround for https://github.com/dalehenrich/superDoit/issues/56"
			commands := String new.
			self positionalArgs do: [:arg | commands add: arg; add: ' ' ] ]
		ifFalse: [
			self file 
				ifNil: [ self error: 'a tODE command must be entered on command line as a positional argument or via --file option' ]
				ifNotNil: [ :commandsFile |
					commands := commandsFile asFileReference contents ] ].
	result := ((self globalNamed: 'TDShell')
		sessionDescription: sessionDescription 
		evaluate: commands
		debugMode: self debugGem) asString.
	^ result
%
