#!/usr/bin/env superdoit_solo
options
{
}
%
Usage
-----
USAGE $basename [--help | -h] [--debug | -D]  [--debugGem] [-v | --verbose] \
                --registry=<registry-name> <stone-name>

DESCRIPTION
  This script is designed to run in the stone of interest and picks up the stone
  information from the .GDKStoneSpec.ston file in the stone directory.

OPTIONS
  -h, --help    display usage message
  -D, --debug   bring up topaz debugger in the event of a script error
  --debugGem    If terminal is connected to stdout, bring up debugger. If not,
                dump stack to stdout and wait for topaz to attach using topaz
                DEBUGGEM command.

EXAMPLES
  $basename --help
  $basename -D
  $basename --debugGem
  $basename "3+4"
-----
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'GsDevKit_stones',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core',
		'Solo'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'Globals'
			}
		}
	},
	#comment : ''
},
RwLoadSpecificationV2 {
	#projectName : 'GsCommands',
	#projectSpecFile : 'rowan/project.ston',
	#diskUrl : '$GEMSTONE/examples/GsCommands/projectsHome/GsCommands',
	#componentNames : [
		'Commands'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'UserGlobals'
			}
		}
	},
	#comment : ''
}
]
%
doit
	| registryClass stoneSpec sessionDescription |
	self preDoitSpecLoad: [:spec | 
		spec projectName = 'GsCommands'
			ifTrue: [ spec projectsHome: '$GEMSTONE/examples/GsCommands/projectsHome' ]
			ifFalse: [ spec projectsHome: self dirname asFileReference parent parent ] ].
	registryClass := (self globalNamed: 'GDKRegistry').	
	self positionalArgs size = 0
		ifTrue: [ self error: 'a tODE command must be entered on command line' ]
		ifFalse: [
			| specFile |
			specFile := FileLocator workingDirectory asFileReference / '.GDKStoneSpec.ston'.
			stoneSpec := (self globalNamed: 'GDKAbstractRegistryStore') fromPath: specFile ifAbsent: [] ].
	sessionDescription := (self globalNamed: 'TDSessionDescription') 
		fromFile: stoneSpec todeHome asFileReference / 'sys' / 'local' / 'sessions' / stoneSpec stoneName.
	^ (self globalNamed: 'TDShell')
		sessionDescription: sessionDescription 
		evaluate: (self positionalArgs at: 1)
		debugMode: self debug
%
