#!/usr/bin/env superdoit_solo
options
{
SuperDoitRequiredOptionWithRequiredArg long: 'registry' short: 'r'.
SuperDoitRequiredOptionWithRequiredArg long: 'stonesDirectory'.
}
%
Usage
-----
USAGE $basename [--help | -h] [--debug | -D]  [--debugGem] \
                [--registry=<registry-name> | -r <registry-name>] \
                --stonesDirectory=<path-to-stones-directory>

DESCRIPTION
  Register a stones directory for the named registry. If the directory does not
  exist the directory is created. The stones directory is used as the default location
  to create a named stone.

OPTIONS
  -h, --help      display usage message
  -D, --debug     bring up topaz debugger in the event of a script error
  --debugGem      If terminal is connected to stdout, bring up debugger. If not,
                  dump stack to stdout and wait for topaz to attach using topaz
                  DEBUGGEM command.
  --registry=<registry-name> | -r <registry-name> 
                  <registry-name> is the name of the registry. Default is hostname.
  --stonesDirectory=<path-to-stones-directory>
									Define <path-to-stones-directory> as the directory where new stones
                  for the given <registry-name> are created.

EXAMPLES
  $basename --help
  $basename -D
  $basename --registry=bosch -stonesDirectory=/home/dhenrich/gemstone/stones
-----
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'GsDevKit_stones',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core',
		'Solo'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'Globals'
			}
		}
	},
	#comment : ''
}
]
%
method
registryName
	^ self registry
		ifNil: [ (self globalNamed: 'System') hostname ]
		ifNotNil: [:value | value ].
%
doit
	| registryClass stonesRegistry stonesDir stonesDirPath |
	self preDoitSpecLoad: [:spec |
		spec projectsHome: self dirname asFileReference parent parent].
	registryClass := (self globalNamed: 'GDKRegistry').	
	stonesRegistry := registryClass stonesRegistryNamed: self registryName.
	stonesDir := self stonesDirectory asFileReference.
	stonesDir ensureCreateDirectory.
	stonesDirPath := GsFile serverRealPath: stonesDir fullName.
	stonesRegistry stonesDirectory: stonesDirPath.
	stonesRegistry export.

%
