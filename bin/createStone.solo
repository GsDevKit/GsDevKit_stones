#!/usr/bin/env superdoit_solo
options
{
SuperDoitOptionalOptionWithNoArg long: 'force' short: 'f'.
SuperDoitOptionalOptionWithNoArg long: 'start'.
SuperDoitRequiredOptionWithRequiredArg long: 'registry'.
SuperDoitOptionalOptionWithRequiredArg long: 'root'.
SuperDoitRequiredOptionWithRequiredArg long: 'template'.
SuperDoitOptionalOptionWithNoArg long: 'verbose' short: 'v'.
}
%
Usage
-----
USAGE $basename [--help | -h] [--debug | -D]  [--debugGem] [-f | --force] [-v | --verbose] \
                --root=<stone-directory> --registry=<registry-name> \
                --template=<template-name> <stone-name> <gemstone-version>

DESCRIPTION
  Create and register a new stone directory to be located at <stone-directory>. If the <stone-directory> already exists, throw an error, unless the --force option is specified, in which case the contents of the directory will be deleted. Populate the <stone-directory> with the directories specified in the derectoryTemplate.

OPTIONS
  -h, --help    display usage message
  -D, --debug   bring up topaz debugger in the event of a script error
  --debugGem    If terminal is connected to stdout, bring up debugger. If not,
                dump stack to stdout and wait for topaz to attach using topaz
                DEBUGGEM command.
  -f, --force   Delete the stone directory if it exists.
  -v, --verbose Verbose logging enabled.

EXAMPLES
  $basename --help
  $basename -D
  $basename --debugGem
  $basename --registry=bosch --template=minimal --root=/export/bosch1/users/dhenrich/_stones/stones bosch_370 3.7.0 
  $basename -f --registry=bosch --template=minimal --root=/export/bosch1/users/dhenrich/_stones/stones bosch_370 3.7.0 
-----
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'GsDevKit_stones',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core',
		'Solo'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'Globals'
			}
		}
	},
	#comment : ''
},
RwLoadSpecificationV2 {
	#projectName : 'GsCommands',
	#projectSpecFile : 'rowan/project.ston',
	#diskUrl : '$GEMSTONE/examples/GsCommands/projectsHome/GsCommands',
	#componentNames : [
		'Commands'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'UserGlobals'
			}
		}
	},
	#comment : ''
}
]
%
doit
	| registryClass stonesRegistry gemstoneVersion stoneName rootDir stoneSpec stoneSpecClass |
	self preDoitSpecLoad: [:spec | 
		spec projectName = 'GsCommands'
			ifTrue: [ spec projectsHome: '$GEMSTONE/examples/GsCommands/projectsHome' ]
			ifFalse: [ spec projectsHome: self dirname asFileReference parent parent ] ].
	registryClass := (self globalNamed: 'GDKRegistry').	
	self verbose
		ifTrue: [ (self globalNamed: 'GDKGsDevKit_stonesBase') verbose: true ].
	stonesRegistry := registryClass stonesRegistryNamed: self registry.
	rootDir := self root
		ifNotNil: [:rootPath | rootPath asFileReference ]
		ifNil: [ stonesRegistry stonesDirectory asFileReference ].
	self positionalArgs size ~= 2
		ifTrue: [ self error: 'Expected 2 positional arguments: <stone-name> <gemstone-version>, only got ', self positionalArgs size printString ].
	stoneName := self positionalArgs at: 1.
	gemstoneVersion := self positionalArgs at: 2.
	stoneSpecClass := self globalNamed: 'GDKStoneSpec'.
	stoneSpec := stoneSpecClass
		newNamed: stoneName 
		rootDirectory: rootDir / stoneName
		directorySpecName: self template 
		gemstoneVersionString: gemstoneVersion.
	stoneSpec
		parentRegistryName: self registry;
		parentRegistryPath: (self globalNamed: 'GDKGsDevKit_stonesBase') dataHomeEnvVar, '/' , (stonesRegistry registryFile relativeTo: stonesRegistry class base_data_home) pathString;
		yourself.
	(stoneSpec registryFile exists or: [stoneSpec rootDir exists])
		ifTrue: [ 
			(stoneSpec rootDir exists)
				ifTrue: [ 
					self force
						ifFalse: [ self error: 'A stone is already present at ', stoneSpec rootDir pathString printString, '. Use --force to clean up.'].
					stoneSpec destroyStoneStructure ]
				ifFalse: [ self error: 'A stone with the name ', stoneName printString, ' already exists. Not yet implemented' ] ].
	stoneSpec createStoneStructureUsing: stonesRegistry.
	stoneSpec registryDir ensureCreateDirectory.
	stoneSpec export.
	stonesRegistry stones at: stoneName put: stoneSpec registryPath.
	stonesRegistry export.
	stoneSpec class 
		symbolicLink: stoneSpec registryPath 
		linkName: stoneSpec rootDir / '.GDKStoneSpec.ston'.
	self start
		ifTrue: [ stoneSpec startStone: self ].
	^ stoneSpec
%
