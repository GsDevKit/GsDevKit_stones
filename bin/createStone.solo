#!/usr/bin/env superdoit_solo
options
{
SuperDoitOptionalOptionWithNoArg long: 'force' short: 'f'.
SuperDoitOptionalOptionWithNoArg long: 'start'.
SuperDoitOptionalOptionWithRequiredArg long: 'registry' short: 'r'.
SuperDoitOptionalOptionWithRequiredArg long: 'root'.
SuperDoitRequiredOptionWithRequiredArg long: 'template'.
SuperDoitOptionalOptionWithNoArg long: 'verbose' short: 'v'.
}
%
Usage
-----
USAGE $basename [--help | -h] [--debug | -D]  [--debugGem] [-f | --force] [-v | --verbose] \
                --root=<stone-directory> [--registry=<registry-name> | -r <registry-name>] \
                --template=<template-name> <stone-name> <gemstone-version>

DESCRIPTION
  Create and register a new stone directory to be located at <stone-directory>. If the <stone-directory> already exists, throw an error, unless the --force option is specified, in which case the contents of the directory will be deleted. Populate the <stone-directory> with the directories specified in the derectoryTemplate.

OPTIONS
  -h, --help    display usage message
  -D, --debug   bring up topaz debugger in the event of a script error
  --debugGem    If terminal is connected to stdout, bring up debugger. If not,
                dump stack to stdout and wait for topaz to attach using topaz
                DEBUGGEM command.
  -f, --force   Delete the stone directory if it exists.
  -v, --verbose Verbose logging enabled.
  --registry=<registry-name> | -r <registry-name> 
                <registry-name> is the name of the registry. Default is hostname.
  --template=<template-name>
                A <template-name> is required to define the layout of the stone 
                directory. The name should be chosen from the list of templates 
                in the registry. (see registryReport.solo -r <registry-name)

EXAMPLES
  $basename --help
  $basename -D
  $basename --debugGem
  # extent0.dbf,  SystemUser
  $basename --force --registry=gsdevkit --template=minimal gs_366 3.6.6
  # extent0.rowan.dbf,  SystemUser
  $basename -f --registry=bosch --template=minimal_rowan rowan_366 3.6.6 
  # extent0.seaside.dbf, tODE installed, DataCurator
  $basename --force --registry=gsdevkit --template=default_seaside tode_366 3.6.6
  # extent0.seaside.dbf,  no tODE installed, DataCurator
  $basename --force -r gsdevkit --template=minimal_seaside seaside_366 3.6.6
-----
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'GsDevKit_stones',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core',
		'Solo'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'Globals'
			}
		}
	},
	#comment : ''
},
RwLoadSpecificationV2 {
	#projectName : 'GsCommands',
	#projectSpecFile : 'rowan/project.ston',
	#diskUrl : '$GEMSTONE/examples/GsCommands/projectsHome/GsCommands',
	#componentNames : [
		'Commands'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'UserGlobals'
			}
		}
	},
	#comment : ''
}
]
%
method
registryName
	^ self registry
		ifNil: [ (self globalNamed: 'System') hostname ]
		ifNotNil: [:value | value ].
%
method
restart
	"startnetldi support"
	"start netldi or if already running, restart the netldi"

	^ true
%
method
debugLogging
	"startnetldi support"
	"no debug logging"

	^ false
%
method
loadTode: stoneSpec
	"not currently functioning GsHostProcess issue? ... ERROR message: /usr/bin/env: ‘bash’: No such file or directory"
	| commandLine |
	commandLine := (self scriptPath asFileReference parent / 'loadTode.stone') fullName.
	commandLine 
		add: ' --projectDirectory=', stoneSpec stonesRegistry projectDirectory;
		add: ' --fullLogging';
		add: ' -- ';
		add: ' -I ', (stoneSpec rootDir / '.topazini') fullName;
		yourself.
	stoneSpec class 
		executeCommandLine: commandLine 
		stdout: nil 
		andInput: nil
%
doit
	| registryClass stonesRegistry gemstoneVersion stoneName rootDir stoneSpec stoneSpecClass |
	self preDoitSpecLoad: [:spec | 
		spec projectName = 'GsCommands'
			ifTrue: [ spec projectsHome: '$GEMSTONE/examples/GsCommands/projectsHome' ]
			ifFalse: [ spec projectsHome: self dirname asFileReference parent parent ] ].
	registryClass := (self globalNamed: 'GDKRegistry').	
	self verbose
		ifTrue: [ (self globalNamed: 'GDKGsDevKit_stonesBase') verbose: true ].
	stonesRegistry := registryClass stonesRegistryNamed: self registryName.
	rootDir := self root
		ifNotNil: [:rootPath | rootPath asFileReference ]
		ifNil: [ stonesRegistry stonesDirectory asFileReference ].
	self positionalArgs size ~= 2
		ifTrue: [ 
			self error: 
				'Expected 2 positional arguments: <stone-name> <gemstone-version>, only got ', 
				self positionalArgs size printString, ' (', self basename, ')' ].
	stoneName := self positionalArgs at: 1.
	gemstoneVersion := self positionalArgs at: 2.
	stoneSpec := (self globalNamed: 'GDKScriptCreateStone')
		createStone: rootDir
		stonesRegistry: stonesRegistry
		stoneName: stoneName
		stoneDirectoryTemplate: self template
		gemstoneVersion: gemstoneVersion
		force: self force
		script: self.
	self start
		ifTrue: [ 
			stoneSpec startStone: self withSuperDoitOptions: false.
			stoneSpec startNetldi: self withSuperDoitOptions: true ].
	^ stoneSpec
%
