#!/usr/bin/env superdoit_solo
options
{
SuperDoitRequiredOptionWithRequiredArg long: 'registry'.
SuperDoitOptionalOptionWithNoArg long: 'netldi' short: 'b'.
SuperDoitOptionalOptionWithNoArg long: 'restart' short: 'r'.
SuperDoitOptionalOptionWithNoArg long: 'notranlogs' short: 'N'.
SuperDoitOptionalOptionWithNoArg long: 'restore' short: 'R'.
SuperDoitOptionalOptionWithRequiredArg long: 'wait' short: 'w'.
SuperDoitOptionalOptionWithNoArg long: 'verbose' short: 'v'.
}
%
Usage
-----
USAGE $basename [--help | -h] [--debug | -D]  [--debugGem] [-v | --verbose] \
                --registry=<registry-name> <stone-name>

DESCRIPTION
  Start named stone.

OPTIONS
  -h, --help    display usage message
  -D, --debug   bring up topaz debugger in the event of a script error
  --debugGem    If terminal is connected to stdout, bring up debugger. If not,
                dump stack to stdout and wait for topaz to attach using topaz
                DEBUGGEM command.
  -v, --verbose Verbose logging enabled.
  --registry    Name of registry that stone is defined in (Required).
  -b, --netldi  Start netldi associated with the stone.
  -r, --restart Stop and restart stone if is is already running.
  -N, --notranlogs
                Start without transaction logs.
  -R, --restore Start for restore.
  -w <waitstone-timeout>, 
  --wait=<waitstone-timeout>
                If stone not started within <waitstone-timeout> seconds, signal
                an error.
  

EXAMPLES
  $basename --help
  $basename -D
  $basename --debugGem
  $basename --registry=bosch bosch_370 
  $basename --registry=bosch bosch_370 -b
  $basename --registry=bosch bosch_370 -r
  $basename --registry=bosch bosch_370 -N
  $basename --registry=bosch bosch_370 -w 5
-----
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'GsDevKit_stones',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core',
		'Solo'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'Globals'
			}
		}
	},
	#comment : ''
},
RwLoadSpecificationV2 {
	#projectName : 'GsCommands',
	#projectSpecFile : 'rowan/project.ston',
	#diskUrl : '$GEMSTONE/examples/GsCommands/projectsHome/GsCommands',
	#componentNames : [
		'Commands'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'UserGlobals'
			}
		}
	},
	#comment : ''
}
]
%
doit
	| registryClass stonesRegistry stoneName stoneSpec |
	self preDoitSpecLoad: [:spec | 
		spec projectName = 'GsCommands'
			ifTrue: [ spec projectsHome: '$GEMSTONE/examples/GsCommands/projectsHome' ]
			ifFalse: [ spec projectsHome: self dirname asFileReference parent parent ] ].
	registryClass := (self globalNamed: 'GDKRegistry').	
	self verbose
		ifTrue: [ (self globalNamed: 'GDKGsDevKit_stonesBase') verbose: true ].
	stonesRegistry := registryClass stonesRegistryNamed: self registry.
	self positionalArgs size ~= 1
		ifTrue: [ self error: 'Expected a positional argument: <stone-name>' ].
	stoneName := self positionalArgs at: 1.
	stoneSpec := stonesRegistry stoneNamed: stoneName.
	System gemEnvironmentVariable: 'GEMSTONE' put: stoneSpec gemstonePath.
	stoneSpec startStone: self withSuperDoitOptions: true.
	self wait
		ifNotNil: [:waitTime |
			| status |
			status := stoneSpec waitStone: waitTime asNumber.
			status != 0
				ifTrue: [ self error: 'The stone did not start within ', waitTime, ' seconds.' ] ].
	^ stonesRegistry
%
