#!/usr/bin/env superdoit_stone
options
{
	SuperDoitOptionalOptionWithRequiredArg long: 'projectsHome'.
}
%
usage
-----
USAGE 
  $basename [--help | -h] [--debug | -D] [OPTIONS]

DESCRIPTION
  Attach the standard Rowan development projects in the stone to git clones:
    gemstoneBaseImage to $ARCHBASE/image, if ARCHBASE env var defined
    Rowan             to $ROWAN_PROJECTS_HOME/Rowan
    RowanClientServices to $ROWAN_PROJECTS_HOME/RowanClientServices
  and reload Rowan, including tests.

OPTIONS
  -h, --help       display usage message
  -D, --debug      bring up topaz debugger in the event of a script error
  --projectsHome=<path-to-rowan_projects-home>
                   If the env var ROWAN_PROJECTS_HOME is not already defined, then
                   ROWAN_PROJECTS_HOME will be defined using <path-to-rowan_projects-home>.

EXAMPLES
  $basename --help -- -L -I .topazini
  $basename -- -L -I .topazini
  $basename --projectsHome=$STONES_HOME/git
-----
%
method
defineCustomEnvVars
	| customenvRef block | 
	customenvRef := FileLocator workingDirectory asFileReference asFileReference / 'customenv'.
	block := [ :varName :valueStr | 
		System gemEnvironmentVariable: varName put: valueStr ].
	customenvRef exists
		ifTrue: [
			| stream |
			"customenv file has precedence"
			stream := ReadStreamPortable on: customenvRef contents.
			[ stream atEnd ] whileFalse: [
				| line index keyAndValue |
			 	line := stream nextLine trimBoth.
				(line beginsWith: '#')
					ifFalse: [
						"looking for 'export xxx=yyy'"
						index := line indexOfSubCollection: 'export' startingAt: 1.
						(index > 0)
							ifTrue: [ 
								" export at beginning of line"
								line := line copyFrom: index + 'export ' size to: line size.
								keyAndValue := line subStringsDelimitedBy: $=.
								block value: (keyAndValue at: 1) value: (keyAndValue at: 2) ] ] ] ] 
%
method
attachDevClonesV2: projectsHome
	| stonLoadSpec |
	(System gemEnvironmentVariable: 'ARCHBASE')
		ifNotNil: [
			"attach but don't load"
		 	(Rowan projectNamed: 'gemstoneBaseImage') 
				gitRepositoryRoot: '$ARCHBASE/image'.
			self logMessage: 'ARCHBASE = ', '$ARCHBASE' asFileReference pathString ].
	(Rowan projectNamed: 'Rowan') 
		gitRepositoryRoot: '$ROWAN_PROJECTS_HOME/Rowan'.
	(Rowan projectNamed: 'RowanClientServices') 
		gitRepositoryRoot: '$ROWAN_PROJECTS_HOME/RowanClientServices'.
	(Rowan projectNamed: 'Rowan')
		_loadedProject resolvedProject projectsHome: '$ROWAN_PROJECTS_HOME'.
	(Rowan projectNamed: 'RowanClientServices')
		_loadedProject resolvedProject projectsHome: '$ROWAN_PROJECTS_HOME'.
	(Rowan projectNamed: 'Rowan')
		loadProjectSet: Rowan platformConditionalAttributes, #('tests' 'v2' 'v2Only' 'testsV2' 'stubs' 'tonel').
	(Rowan projectNamed: 'RowanClientServices')
		loadProjectSet: Rowan platformConditionalAttributes, #('v2' 'tests' 'testsV2').
	stonLoadSpec := (Rowan projectNamed: 'STON') _loadSpecification.
	(stonLoadSpec 
		addTopLevelComponentNamed: 'Tests';
		customConditionalAttributes: stonLoadSpec customConditionalAttributes, {'tests'};
		resolve) load.
%
method
attachDevClonesV3: projectsHome
	| rowanProject loadSpecs projectNames |
	(System gemEnvironmentVariable: 'ARCHBASE')
		ifNil: [ self logMessage: 'ARCHBASE not set, so gemstoneBaseImage project not attached and not loaded' ]
		ifNotNil: [:value |
			"attach gemstoneBaseImage project"
			| loadSpec gitUrl |
			System gemEnvironmentVariable: 'ARCHBASE' put: value asFileReference pathString.
			self logMessage: 'ARCHBASE = ', '$ARCHBASE' asFileReference pathString.
		 	loadSpec := (Rowan projectNamed: 'gemstoneBaseImage') loadSpecification.
			gitUrl := loadSpec gitUrl.
			(gitUrl notNil and: [gitUrl beginsWith: 'file:'])
					ifTrue: [ 
						"project already attached, so reload"
						loadSpec
							addCustomConditionalAttributes: #('tests' 'obsolete');
							load.
						self logMessage: 'gemstoneBaseImage reloaded' ] 
					ifFalse: [
						loadSpec
							gitUrl: 'file:', ('$ARCHBASE' asFileReference pathString);
							projectSpecFile: 'image/rowan/project_attached.ston';
							addCustomConditionalAttributes: #('tests' 'obsolete');
							load.
						self logMessage: 'gemstoneBaseImage project attached and reloaded'.
						System commit ] ].
  rowanProject := Rowan projectNamed: 'Rowan'.
	loadSpecs := rowanProject loadedLoadSpecifications.
	{
		'Announcements' .
		'FileSystemGs' .
		'RemoteServiceReplication' .
		'RowanClientServices' .
	}
		do: [:projectName |
			"pick up the extra rowan3 projects"
			(Rowan projectNamed: projectName ifAbsent: [])
				ifNotNil: [:project |
					| loadSpec |
					loadSpec :=  project loadSpecification.
					loadSpecs addLoadSpec: loadSpec ] ].
	loadSpecs do: [:loadSpec |
		| relRoot |
		relRoot := loadSpec relativeRepositoryRoot.
		relRoot isEmpty
			ifTrue: [ 
				loadSpec 
					projectsHome: projectsHome;
					gitUrl: 'file:', ((projectsHome, '/', loadSpec projectAlias) asFileReference pathString);
					yourself  ]
			ifFalse: [
						"embedded Rowan project" 
						loadSpec
							gitUrl: 'file:', (((projectsHome, '/', loadSpec projectAlias) asFileReference / relRoot) pathString);
							projectsHome: projectsHome;
							yourself ].
		loadSpec addCustomConditionalAttributes: #('tests' 'testsv2') ].
	projectNames := loadSpecs load projectNames asArray sort. 
	self logMessage: 'Rowan projects attached and reloaded: '.
	projectNames do: [:each |
		self logMessage: '	', each ]
%
doit
	| projectsHome |
	(Rowan version >= (RwSemanticVersionNumber fromString: '2.2.0'))
		ifFalse: [ self error: 'This script should be run in Rowan v2.2 or later'].
	(FileLocator workingDirectory asFileReference / '.GDKStoneSpec.ston') exists
		ifTrue: [ self defineCustomEnvVars ].
	self projectsHome
		ifNil: [ 
			(System gemEnvironmentVariable: 'ROWAN_PROJECTS_HOME')
				ifNotNil: [:value | projectsHome := value asFileReference pathString ]
				ifNil: [ self error: 'ROWAN_PROJECTS_HOME must be defined, either via existing env var ROWAN_PROJECTS_HOME or --projectsHome' ] ]
		ifNotNil: [:value | 
			projectsHome := value asFileReference pathString.
			System gemEnvironmentVariable: 'ROWAN_PROJECTS_HOME' put: projectsHome ].
	self logMessage: 'ROWAN_PROJECTS_HOME = ', '$ROWAN_PROJECTS_HOME' asFileReference pathString.
	self logMessage: 'Rowan version: ', Rowan versionString.
	(Rowan version >= (RwSemanticVersionNumber fromString: '3.0.0'))
		ifTrue: [ self attachDevClonesV3: projectsHome ]
		ifFalse: [ self attachDevClonesV2: projectsHome ].
	^ System commit
%
