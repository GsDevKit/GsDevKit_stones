#!/usr/bin/env superdoit_solo
options
{
SuperDoitOptionalOptionWithNoArg long: 'force' short: 'f'.
}
%
Usage
-----
USAGE $basename [--help | -h] [--debug | -D]  [--debugGem] <registry-name>

DESCRIPTION
  Delete the registry meta data in $STONES_DATA_HOME for <registry-name>.

  For now the directory structure that you created in $STONES_HOME/<registry-name> 
  for the stones and git repositories is left intact. $STONES_HOME/<registry-name> 
  can be deleted using `chmod -R +w $STONES_HOME/<registry-name>; 
  rm -rf $STONES_HOME/<registry-name>`.

OPTIONS
  -h, --help    display usage message
  -D, --debug   bring up topaz debugger in the event of a script error
  --debugGem    If terminal is connected to stdout, bring up debugger. If not,
                dump stack to stdout and wait for topaz to attach using topaz
                DEBUGGEM command.
  -f, --force,  Shut down stones and netldis associated with the registry.

EXAMPLES
  $basename --help
  $basename -D
  $basename --debugGem
  $basename bosch 
-----
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'GsDevKit_stones',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core',
		'Solo'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'Globals'
			}
		}
	},
	#comment : ''
},
RwLoadSpecificationV2 {
	#projectName : 'GsCommands',
	#projectSpecFile : 'rowan/project.ston',
	#diskUrl : '$GEMSTONE/examples/GsCommands/projectsHome/GsCommands',
	#componentNames : [
		'Commands'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'UserGlobals'
			}
		}
	},
	#comment : ''
}
]
%
doit
	| registryName registryClass stonesRegistry stoneName stoneSpec |
	self preDoitSpecLoad: [:spec | 
		spec projectName = 'GsCommands'
			ifTrue: [ spec projectsHome: '$GEMSTONE/examples/GsCommands/projectsHome' ]
			ifFalse: [ spec projectsHome: self dirname asFileReference parent parent ] ].
	self positionalArgs size = 0
		ifTrue: [ self error: 'Expected a required positional argument: <registry-name> (', self basename, ')'].
	registryName := self positionalArgs at: 1.	
	registryClass := (self globalNamed: 'GDKRegistry').
	(registryClass stonesRegistryNamed: registryName ifAbsent: [])
		ifNil: [ self error: 'The registry ', registryName printString, ' does not exist', ' (', self basename, ')']
		ifNotNil: [:stonesRegistry | stonesRegistry destroy: self force ].
	^ self noResult
%
