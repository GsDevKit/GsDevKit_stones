#!/usr/bin/env superdoit_solo
options
{
SuperDoitOptionalOptionWithRequiredArg long: 'registry' short: 'r'.
SuperDoitOptionalOptionWithNoArg long: 'verbose' short: 'v'.
}
%
Usage
-----
USAGE $basename [--help | -h] [--debug | -D]  [--debugGem] [-v | --verbose] \
                [registry=<registry-name> | -r <registry-name>] <stone-name>

DESCRIPTION
  Shut down stone and netldi. Delete the directory structure and meta data associated
  with the stone.

OPTIONS
  -h, --help    display usage message
  -D, --debug   bring up topaz debugger in the event of a script error
  --debugGem    If terminal is connected to stdout, bring up debugger. If not,
                dump stack to stdout and wait for topaz to attach using topaz
                DEBUGGEM command.
  --registry=<registry-name> | -r <registry-name> 
                <registry-name> is the name of the registry. Default is hostname.
  -v, --verbose Verbose logging enabled.

EXAMPLES
  $basename --help
  $basename -D
  $basename --debugGem
  $basename --registry=bosch  bosch_370 
-----
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'GsDevKit_stones',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core',
		'Solo'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'Globals'
			}
		}
	},
	#comment : ''
},
RwLoadSpecificationV2 {
	#projectName : 'GsCommands',
	#projectSpecFile : 'rowan/project.ston',
	#diskUrl : '$GEMSTONE/examples/GsCommands/projectsHome/GsCommands',
	#componentNames : [
		'Commands'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'UserGlobals'
			}
		}
	},
	#comment : ''
}
]
%
method
registryName
	^ self registry
		ifNil: [ (self globalNamed: 'System') hostname ]
		ifNotNil: [:value | value ].
%
method
debugLogging
	"startnetldi support"
	^ false
%
doit
	| registryClass stonesRegistry stoneName stoneSpec |
	self preDoitSpecLoad: [:spec | 
		spec projectName = 'GsCommands'
			ifTrue: [ spec projectsHome: '$GEMSTONE/examples/GsCommands/projectsHome' ]
			ifFalse: [ spec projectsHome: self dirname asFileReference parent parent ] ].
	registryClass := (self globalNamed: 'GDKRegistry').	
	self verbose
		ifTrue: [ (self globalNamed: 'GDKGsDevKit_stonesBase') verbose: true ].
	stonesRegistry := registryClass stonesRegistryNamed: self registryName.
	self positionalArgs size ~= 1
		ifTrue: [ self error: 'Expected a positional argument: <stone-name>', ' (', self basename, ')' ].
	stoneName := self positionalArgs at: 1.
	stoneSpec := stonesRegistry 
		stoneNamed: stoneName 
		ifAbsent: [ self error: 'The stone ', stoneName printString, ' does not exist', ' (', self basename, ')' ].
	stonesRegistry destroyStoneStructureFor: stoneName.
	^ self noResult
%
