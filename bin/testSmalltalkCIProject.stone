#!/usr/bin/env superdoit_stone
options
{
	SuperDoitRequiredOptionWithRequiredArg long: 'buildDirectory'.
	SuperDoitRequiredOptionWithRequiredArg long: 'config_ston'.
	SuperDoitRequiredOptionWithRequiredArg long: 'named'.
	SuperDoitOptionalOptionWithNoArg long: 'checkStatusFile'.
	SuperDoitOptionalOptionWithRequiredArg long: 'reportFile'.
	SuperDoitOptionalOptionWithNoArg long: 'noColor'.
}
%
#
usage
-----
USAGE 
  $basename [--help | -h] [--debug | -D] -- ([-r] | -l | -L) -I <path-to-.topazini> \
            [<topaz-command-line-args>]

DESCRIPTION
  Run the unit tests using the given smalltalk.ston file specified with the --config_ston option.

OPTIONS
  <path-to-.topazini>        path to a .topazini file with a minimum of username, 
                             password and stone name set
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error

EXAMPLES
  $basename -h                     -- -l -I ./.topazini
  $basename -D <script-arguments>  -- -l -I ./.topazini
  $basename <script-arguments>     -- -l -I ./.topazini

  $basename --named=daleh --config_ston=/home/dhenrich/work/kermit.50402/smalltalkCI/.smalltalk.ston \
             --buildDirectory=`pwd` --reportFile=report --noColor -D
-----
%
method
checkAndConsumeStatusFile
	| statusFile |
	statusFile := (Smalltalk at: #SmalltalkCI) buildStatusFile.
	(GsFile existsOnServer: statusFile)
		ifTrue: [ 
			| buildStatus |
			buildStatus := GsFile getContentsOfServerFile: statusFile.
			GsFile removeServerFile: statusFile.
			buildStatus = '[test failure]'
				ifTrue: [ self error: 'SmalltalkCI test failed', ' (', self basename, ')' ] ]
%
method
lauchSmalltalkCITest
  | cls instance fullPathToConfig projectDir |
	cls := Smalltalk at: #SmalltalkCI.
	fullPathToConfig := self config_ston.
	projectDir := cls dirname: fullPathToConfig.
  instance := cls
    newInstanceFor: fullPathToConfig
    projectDirectory: projectDir.
  instance spec name: self named.
	self reportFile
		ifNotNil: [:filePath | 
			instance reportFilePath: filePath ].
  ^ instance test
%
doit
	| superDoitTransientDictName |
	(Smalltalk at: 'System') gemEnvironmentVariable: 'SCIII_COLORFUL' put: self noColor not asString. "default is to use color"
  self stdout nextPutAll: '----- Running ', self scriptPath; lf.
  self stdout nextPutAll: '----- Run unit tests for ', self named; lf.
	self stdout nextPutAll: '----- SCIII_COLORFUL ', ((Smalltalk at: #'System') gemEnvironmentVariable: 'SCIII_COLORFUL') asString; lf.
  self stdout nextPutAll: '----- SmalltalkCI isColorful ', SmalltalkCI isColorful printString; lf.
  self stdout nextPutAll: '----- SmalltalkCI ansiYellow ', SmalltalkCI ansiYellow printString; lf.
	"avoid polluting the globals with superDoit classes"
	{
		#SuperDoit_trasientSymbolDictionary .	"workaround superDoit bug in older versions"
		(self globalNamed: 'SuperDoitCommandParser') transientSymbolDictionaryName .
	} do: [:symDictName |
		superDoitTransientDictName := symDictName.
		GsSession currentSession symbolList 
			removeDictionaryNamed: superDoitTransientDictName 
			ifAbsent: [] ].
	System gemEnvironmentVariable: 'SMALLTALK_CI_BUILD' put: self buildDirectory.
   self stdout nextPutAll:  '----- build directory ', self buildDirectory; lf.
   self stdout nextPutAll: '----- config_ston ', self config_ston; lf.
   self stdout nextPutAll:  '----- isColorful ', (Smalltalk at: #SmalltalkCI) isColorful printString; lf.
	self lauchSmalltalkCITest.
	self checkStatusFile
		ifTrue: [ self checkAndConsumeStatusFile ]. 
	^ self noResult
%
