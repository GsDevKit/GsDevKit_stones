#!/usr/bin/env superdoit_solo
customoptions
{
SuperDoitOptionalOptionWithNoArg long: 'help'.
SuperDoitOptionalOptionWithNoArg long: 'debug'.
SuperDoitOptionalOptionWithNoArg long: 'debugGem'.
SuperDoitOptionalOptionWithRequiredArg long: 'registry'.
SuperDoitOptionalOptionWithNoArg long: 'verbose'.
SuperDoitOptionalOptionWithNoArg long: 'debugLogging' short: 'd'.
SuperDoitOptionalOptionWithNoArg long: 'restart' short: 'r'.
}
%
Usage
-----
USAGE $basename [--help] [--debug]  [--debugGem] [--verbose] \
                [--registry=<registry-name>] <stone-name>

DESCRIPTION
  Start netldi for named stone.

OPTIONS
	Note that the standard shortcuts options are not supported, since we want
  to be faithful to the startnetldi options and they comprise a big chunk
  of the alphabet.

  --help        display usage message
  --debug       bring up topaz debugger in the event of a script error
  --debugGem    If terminal is connected to stdout, bring up debugger. If not,
                dump stack to stdout and wait for topaz to attach using topaz
                DEBUGGEM command.
  --registry=<registry-name> 
                <registry-name> is the name of the registry. Default is hostname.
  --verbose     Verbose logging enabled.
  #
  # standard startnetldi options (currently supported)
  #
  -d, --debugLogging cause netldi to print extra information to its log file.
  -r, --restart      if a netldi with the specified name is already running, 
                     stop the running netldi and restart it.
  

EXAMPLES
  $basename --help
  $basename --debug
  $basename --debugGem
  $basename --registry=bosch bosch_370 
  $basename --registry=bosch bosch_370 -r
  $basename --registry=bosch bosch_370 -d
  # if launched from stone directory where .GDKStoneSpec.ston is present
  $basename  
  $basename -r
  $basename -d
-----
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'GsDevKit_stones',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core',
		'Solo'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'Globals'
			}
		}
	},
	#comment : ''
},
RwLoadSpecificationV2 {
	#projectName : 'GsCommands',
	#projectSpecFile : 'rowan/project.ston',
	#diskUrl : '$GEMSTONE/examples/GsCommands/projectsHome/GsCommands',
	#componentNames : [
		'Commands'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'UserGlobals'
			}
		}
	},
	#comment : ''
}
]
%
method
registryName
	^ self registry
		ifNil: [ (self globalNamed: 'System') hostname ]
		ifNotNil: [:value | value ].
%
doit
	| registryClass stonesRegistry stoneName stoneSpec |
	self preDoitSpecLoad: [:spec | 
		spec projectName = 'GsCommands'
			ifTrue: [ spec projectsHome: '$GEMSTONE/examples/GsCommands/projectsHome' ]
			ifFalse: [ spec projectsHome: self dirname asFileReference parent parent ] ].
	registryClass := (self globalNamed: 'GDKRegistry').	
	self verbose
		ifTrue: [ (self globalNamed: 'GDKGsDevKit_stonesBase') verbose: true ].
	self positionalArgs size = 0
		ifTrue: [
			| specFile |
			specFile := FileLocator workingDirectory asFileReference / '.GDKStoneSpec.ston'.
			stoneSpec := (self globalNamed: 'GDKAbstractRegistryStore') 
				fromPath: specFile 
				ifAbsent: [ 
					self error: self basename, ' must be run in a stone directory when run without a <stone-name>'] ]
		ifFalse: [
			self positionalArgs size > 1 
				ifTrue: [ self error: 'Expected a single positional argument: <stone-name>, not ', self positionalArgs size printString, ' positional arguments', ' (', self basename, ')' ].
			stoneName := self positionalArgs at: 1.
			stonesRegistry := registryClass stonesRegistryNamed: self registryName.
			stoneSpec := stonesRegistry stoneNamed: stoneName ].
	stoneSpec startNetldi: self withSuperDoitOptions: true.
	^ self noResult
%
