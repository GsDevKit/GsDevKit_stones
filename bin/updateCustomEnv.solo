#!/usr/bin/env superdoit_solo
options
{
SuperDoitOptionalOptionWithRequiredArg long: 'registry'.
SuperDoitOptionalOptionWithRequiredArg long: 'addKey'.
SuperDoitOptionalOptionWithRequiredArg long: 'value'.
SuperDoitOptionalOptionWithRequiredArg long: 'removeKey'.
SuperDoitOptionalOptionWithNoArg long: 'restart'.
}
%
Usage
-----
USAGE $basename [--help | -h] [--debug | -D]  [--debugGem] [-v | --verbose] \
                --registry=<registry-name> <stone-name> [--restart] \
                [
                  [--addKey=<env-name> --value=<env-value>] |
                  [--removeKey=<env-name> ]
                ]

DESCRIPTION
  Update the customenv file for the named stone.

OPTIONS
  -h, --help    display usage message
  -D, --debug   bring up topaz debugger in the event of a script error
  --debugGem    If terminal is connected to stdout, bring up debugger. If not,
                dump stack to stdout and wait for topaz to attach using topaz
                DEBUGGEM command.
  -v, --verbose Verbose logging enabled.
  --registry    Name of registry that stone is defined in (Required).
  --addKey=<env-name> --value=<env-value>
                Add or update an <env-name> with the given <env-value>
  --removeKey=<env-name>
                Remove definition for <env-name> from customenv file
  --restart     Restart netldi after customenv dictionary has been updated.

EXAMPLES
  $basename --help
  $basename --registry=bosch bosch_370 --addKey=ROWAN_PROJECTS_HOME --value=$STONES_HOME/git rowan_366
  $basename --registry=bosch bosch_370 --removeKey=ROWAN_PROJECTS_HOME rowan_366
-----
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'GsDevKit_stones',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core',
		'Solo'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'Globals'
			}
		}
	},
	#comment : ''
},
RwLoadSpecificationV2 {
	#projectName : 'GsCommands',
	#projectSpecFile : 'rowan/project.ston',
	#diskUrl : '$GEMSTONE/examples/GsCommands/projectsHome/GsCommands',
	#componentNames : [
		'Commands'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'UserGlobals'
			}
		}
	},
	#comment : ''
}
]
%
method
debugLogging
	"expected by startNetldi"
	^ false
%
doit
	| registryClass stonesRegistry stoneName stoneSpec stoneDirectorySpec |
	self preDoitSpecLoad: [:spec | 
		spec projectName = 'GsCommands'
			ifTrue: [ spec projectsHome: '$GEMSTONE/examples/GsCommands/projectsHome' ]
			ifFalse: [ spec projectsHome: self dirname asFileReference parent parent ] ].
	registryClass := (self globalNamed: 'GDKRegistry').	
	self positionalArgs size = 0
		ifTrue: [
			| specFile |
			specFile := FileLocator workingDirectory asFileReference / '.GDKStoneSpec.ston'.
			stoneSpec := (self globalNamed: 'GDKAbstractRegistryStore') fromPath: specFile ifAbsent: [] ]
		ifFalse: [
			self positionalArgs size > 1 
				ifTrue: [ self error: 'Expected a single positional argument: <stone-name>, not ', self positionalArgs size printString, ' positional arguments' ].
			stoneName := self positionalArgs at: 1.
			self registry
				ifNil: [ self error: '--registry option must be specified when <stone-name> is specified' ].
			stonesRegistry := registryClass stonesRegistryNamed: self registry.
			stoneSpec := stonesRegistry stoneNamed: stoneName ].
	stoneDirectorySpec := stoneSpec stoneDirectorySpec.
	self addKey
		ifNotNil: [:key | 
			stoneDirectorySpec customenv at: key put: self value ]
		ifNil: [
			self removeKey
				ifNil: [ self error: 'Expected one of --addKey or --removeKey option' ]
				ifNotNil: [:key |
					stoneDirectorySpec customenv removeKey: key ifAbsent: [] ] ].
	stoneDirectorySpec exportCustomEnvTo: stoneSpec rootDir / 'customenv'.
	stoneSpec export.
	self restart 
		ifTrue: [ 
			stoneSpec 
				startNetldi: self 
				withSuperDoitOptions: true ].
	^ self noResult
%
