#!/usr/bin/env superdoit_solo
options
{
SuperDoitOptionalOptionWithNoArg long: 'force' short: 'f'.
SuperDoitRequiredOptionWithRequiredArg long: 'registry'.
SuperDoitOptionalOptionWithRequiredArg long: 'productPath'.
SuperDoitOptionalOptionWithRequiredArg long: 'fromDirectory'.
}
%
Usage
-----
USAGE $basename [--help | -h] [--debug | -D]  [--debugGem] --registry=<registry-name> \
                [ [ --productPath=<path-to-product-tree> <gemstone-version> ] \
                  | \
                [ --fromDirectory=<path-to-directory-of-productTrees> ] ]

DESCRIPTION
  Register a GemStone product tree that is already downloaded/create with <registry-name>.

OPTIONS
  -h, --help      display usage message
  -D, --debug     bring up topaz debugger in the event of a script error
  --debugGem      If terminal is connected to stdout, bring up debugger. If not,
                  dump stack to stdout and wait for topaz to attach using topaz
                  DEBUGGEM command.

EXAMPLES
  $basename --help
  $basename -D
  $basename --registry=bosch --productPath=/export/bosch1/users/dhenrich/_work/c_37x/fast50/gs/product 3.7.0 
  $basename --registry=bosch --fromDirectory=$GS_HOME/shared/downloads/products 
-----
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'GsDevKit_stones',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core',
		'Solo'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'Globals'
			}
		}
	},
	#comment : ''
}
]
%
method
register: gemstoneVersion path: gemstonePath for: stonesRegistry
	(stonesRegistry products at: gemstoneVersion ifAbsent: [])
		ifNotNil: [:existingPath | 
			self force 
				ifFalse: [ 
					self error: 'There is an existing path (', 
						existingPath, 
						') for the GemStone version ', 
						gemstoneVersion, 
						'. Use the --force option to override.' ] ].
	stonesRegistry products at: gemstoneVersion put: gemstonePath.
%
doit
	| registryClass stonesRegistry gemstoneVersion gemstonePath |
	self preDoitSpecLoad: [:spec |
		spec projectsHome: self dirname asFileReference parent parent].
	registryClass := (self globalNamed: 'GDKRegistry').	
	stonesRegistry := registryClass stonesRegistryNamed: self registry.
	self productPath
		ifNotNil: [:productPath |
			gemstonePath := GsFile serverRealPath: self productPath.
			gemstoneVersion := self positionalArgs at: 1.
		(stonesRegistry products at: gemstoneVersion ifAbsent: [])
			ifNotNil: [:existingPath | 
				self force 
					ifFalse: [ 
						self error: 'There is an existing path (', 
							existingPath,
							') for the GemStone version ', 
							gemstoneVersion, 
							'. Use the --force option to override.' ].
				self register: gemstoneVersion path: gemstonePath for: stonesRegistry ] ]
		ifNil: [
			self fromDirectory
				ifNotNil: [:directory |
					(directory asFileReference children select: [:entity | entity isDirectory ])
						do: [:dir | 
							| productPrefix dirName |
							productPrefix := 'GemStone64Bit3.'.
							dirName := dir basename.
							(dirName beginsWith: productPrefix)
								ifTrue: [
									| gemstoneVersion dashIndex |
									dashIndex := dirName indexOf: $- ifAbsent: [].
									(dashIndex notNil and: [ dashIndex > 0 ])
										ifTrue: [
											gemstoneVersion := dirName copyFrom: productPrefix size - 1 to: dashIndex - 1.
											(stonesRegistry products at: gemstoneVersion ifAbsent: [])
												ifNil: [ self register: gemstoneVersion path: dir pathString for: stonesRegistry ] ] ] ] ]
				ifNil: [ self error: 'one of --productPath or --fromDirectory is required' ] ].
	stonesRegistry export.

%
