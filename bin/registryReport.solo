#!/usr/bin/env superdoit_solo
options
{
	SuperDoitOptionalOptionWithRequiredArg long: 'registry'.
	SuperDoitOptionalOptionWithRequiredArg long: 'projectSet'.
	SuperDoitOptionalOptionWithRequiredArg long: 'stone'.
	SuperDoitOptionalOptionWithRequiredArg long: 'template'.
}
%
usage
-----
USAGE $basename [--help | -h] [--debug | -D]  [--debugGem] \
  [--registry=<registry-name> \
     [--projectSet=<projectSet-name> | \
      --template=<template-name> | \
      --stone=<stone-name> ] ]

DESCRIPTION
  With no options, list the names of the existing registries.

OPTIONS
  -h, --help        display usage message
  -D, --debug       bring up topaz debugger in the event of a script error
  --debugGem        If terminal is connected to stdout, bring up debugger. If not,
                    dump stack to stdout and wait for topaz to attach using topaz
                    DEBUGGEM command.
  --registry=<registry-name>
                    list the contents of the registry
  --projectSet=<projectSet-name>
                    list the contents of the named project set in the given registry
  --stone=<stone-name>
                    list the contents of the named stone in the given registry
  --template=<template-name>
                    list the contents of the named template in the given registry

EXAMPLES
  $basename --help
  $basename -D
  $basename --debugGem
  $basename 
  $basename --registry=bosch
  $basename --registry=bosch --projectSet=dev
  $basename --registry=bosch --templage=minimal
  $basename --registry=bosch --stone=bosch_370
-----
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'GsDevKit_stones',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core',
		'Solo'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'Globals'
			}
		}
	},
	#comment : ''
}
]
%
method
projectSetReport: projectSetName in: registry
	| projectSetPath |
	projectSetPath := registry 
		projectSetNamed: projectSetName 
		ifAbsent: [ 
			self error: ' No project set named: ', 
					projectSetName, ' found in the registry ', 
					registry name].
	^ (self globalNamed: 'GDKAbstractRegistryStore') 
			fromPath: projectSetPath
			ifAbsent: [ self error: 'No file named', projectSetPath , ' found.' ] 
%
method
stoneReport: stoneName in: registry
	| stonePath |
	stonePath := registry 
		stoneNamed: stoneName 
		ifAbsent: [ 
			self error: ' No stone named: ', 
					stoneName, ' found in the registry ', 
					registry name].
	^ (self globalNamed: 'GDKAbstractRegistryStore') 
			fromPath: stonePath
			ifAbsent: [ self error: 'No file named', stonePath , ' found.' ] 
%
method
templateReport: templateName in: registry
	| templatePath |
	templatePath := registry 
		templateNamed: templateName 
		ifAbsent: [ 
			self error: ' No template named: ', 
					templateName, ' found in the registry ', 
					registry name].
	^ (self globalNamed: 'GDKAbstractRegistryStore') 
			fromPath: templatePath
			ifAbsent: [ self error: 'No file named', templatePath , ' found.' ] 
%
method
configReport: config
	| report |
	report := GsTonelOrderedDictionary new.
	(config associationsAsArray sort: [:a :b | a key <= b key]) do: [:assoc | report add: assoc].
	^ report
%
doit
	| config |
	self preDoitSpecLoad: [:spec |
		spec projectsHome: self dirname asFileReference parent parent].
	config := (self globalNamed: 'GDKConfiguration') instance.
	self registry
		ifNotNil: [:registryName |
			| registry |
			registry := config registryNamed: registryName.
			self projectSet 
				ifNil: [ 
					self template
						ifNil: [ 
							self stone
								ifNil: [ ^ registry ]
								ifNotNil: [:stoneName | ^ self stoneReport: stoneName in: registry ] ]
						ifNotNil: [:templateName | ^ self templateReport: templateName in: registry ] ]
				ifNotNil: [:projectSetName | ^ self projectSetReport: projectSetName in: registry ] ].
	self stone ifNotNil: [ self error: 'a --registry is required to list the stone' ].
	self template ifNotNil: [ self error: 'a --registry is required to list the template' ].
	self projectSet ifNotNil: [ self error: 'a --registry is required to list the projectSet' ].
	^ self configReport: config
%
