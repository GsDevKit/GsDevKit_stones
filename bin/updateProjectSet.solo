#!/usr/bin/env superdoit_solo
options
{
SuperDoitRequiredOptionWithRequiredArg long: 'registry'.
SuperDoitRequiredOptionWithRequiredArg long: 'projectSet'.
SuperDoitRequiredOptionWithRequiredArg long: 'projectName'.

SuperDoitOptionalOptionWithRequiredArg long: 'revision'.
SuperDoitOptionalOptionWithRequiredArg long: 'diskUrl'.
SuperDoitOptionalOptionWithRequiredArg long: 'gitUrl'.
SuperDoitOptionalOptionWithRequiredArg long: 'remote' default: 'origin'.
SuperDoitOptionalOptionWithRequiredArg long: 'readonlyDiskUrl'.
SuperDoitOptionalOptionWithRequiredArg long: 'componentName'.
}
%
usage
-----
USAGE $basename [--help | -h] [--debug | -D]  [--debugGem] registry=<registry-name> \
                --projectSet=<projectSet-name> --projectName=<project-name> \
                --gitUrl=<spec-url>

DESCRIPTION
  A project set is a list of load specs  that specify a group of git repositories that are managed together. 

OPTIONS
  -h, --help        display usage message
  -D, --debug       bring up topaz debugger in the event of a script error
  --debugGem        If terminal is connected to stdout, bring up debugger. If not,
                    dump stack to stdout and wait for topaz to attach using topaz
                    DEBUGGEM command.
  --registry=<registry-name>   
                    name of the registry. Default is /usr/bin/hostname
  --projectSet=<projectSet-name>
                    Name of the project set.
  --gitUrl=<git-url>
                    The gitUrl must be defined for a project.

EXAMPLES
  $basename --help
  $basename -D
  $basename --debugGem
  $basename
  # simplest definition using a https: url to specify spec location
  $basename --registry=bosch --projectSet=dev \
            --projectName=Rowan \
            --gitUrl=git@github.com:GemTalk/Rowan.git
  # simplest definition using a file: url to specify spec location
  $basename --registry=bosch --projectSet=dev \
            --projectName=Rowan \
            --gitUrl=git@github.com:GemTalk/Rowan.git
  # simplest definition using a git url to specify where to clone the repo from
  $basename --registry=bosch --projectSet=dev \
            --projectName=superDoit \
            --gitUrl=git@github.com:dalehenrich/superDoit.git
  # simplest definition using a diskUrl to specify where the existing clone can be found
  $basename --registry=bosch --projectSet=dev \
            --projectName=superDoit \
            --diskUrl=file:/home/dhenrich/_homes/rogue/_home/shared/repos/superDoit 
  # simplest definition using a readonlyDiskUrl to specify where the existing clone can be found
  $basename --registry=bosch --projectSet=dev \
            --projectName=superDoit \
            --readonlyDiskUrl=file:$GEMSTONE/upgrade/projects/Rowan
  # undefine a field`
  $basename --registry=bosch --projectSet=dev \
            --projectName=Rowan \
            --revision=nil

-----
%
instvars
specDict
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'GsDevKit_stones',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core',
		'Solo'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'Globals'
			}
		}
	},
	#comment : ''
}
]
%
method
createProjectSet: name in: registry
	| projectSet |
	projectSet := ((self globalNamed: 'GDKProjectSet') newNamed: name)
		parentRegistryName: registry name;
		parentRegistryPath: '$', (self globalNamed: 'GDKGsDevKit_stonesBase') dataHomeEnvVar, '/' , (registry registryFile relativeTo: registry class base_data_home) fullName;
		yourself.
	projectSet registryFile exists
		ifTrue: [ self error: 'project set ', projectSet registryfile fullName printString, ' already exists'].
	projectSet registryDir ensureCreateDirectory.
	projectSet export.
	registry projectSets at: name put: projectSet registryPath.
	registry export.
	^ projectSet
%
method
updateField: fieldName with: value
	value = 'nil'
		ifTrue: [ specDict removeKey: fieldName ifAbsent: [] ]
		ifFalse: [ specDict at: fieldName put: value ].
%
doit
	| registryClass stonesRegistry name projectSet projectSetPath loadSpecs |
	self preDoitSpecLoad: [:spec |
		spec projectsHome: self dirname asFileReference parent parent].
	registryClass := (self globalNamed: 'GDKRegistry').	
	stonesRegistry := registryClass stonesRegistryNamed: self registry.
	name := self projectSet.
	projectSetPath := stonesRegistry projectSets 
		at: name 
		ifAbsent: [ ].
	projectSet := projectSetPath
		ifNotNil: [ 
			(self globalNamed: 'GDKProjectSet') 
				fromPath: projectSetPath 
				ifAbsent: [ self error: 'Cannot find project set ', projectSetPath printString ]]
		ifNil: [
			self createProjectSet: name ].

	loadSpecs := projectSet loadSpecs.
	specDict := loadSpecs at: self projectName ifAbsentPut: [ Dictionary new ].

	self gitUrl 
		ifNotNil: [:url | 
			(specDict at: 'gitUrls' ifAbsentPut: [ Dictionary new ]) at: self remote put: url ]
		ifNil: [
			self diskUrl 
				ifNotNil: [ self error: 'diskUrl option not yet implemented' ]
				ifNil: [
					self readonlyDiskUrl 
						ifNotNil: [  self error: 'readonlyDiskUrl not yet implemented' ]
						ifNil: [ self error: 'one of ''gitUrl'' or ''diskUrl'' or: ''readonlyDiskUrl'' must be defined.' ] ] ].
	self revision
		ifNotNil: [:value | self updateField: 'revision' with: value ].
	self componentName
		ifNotNil: [:value | self updateField: 'componentName' with: value ].

	projectSet registryDir ensureCreateDirectory.
	projectSet export.
	stonesRegistry projectSets at: name put: projectSet registryPath.
	stonesRegistry export.
	^ projectSet
%
