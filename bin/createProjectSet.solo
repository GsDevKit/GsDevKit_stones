#!/usr/bin/env superdoit_solo
options
{
SuperDoitRequiredOptionWithRequiredArg long: 'registry'.
SuperDoitRequiredOptionWithRequiredArg long: 'projectSet'.
SuperDoitOptionalOptionWithRequiredArg long: 'from'.
SuperDoitOptionalOptionWithRequiredArg long: 'key'.
SuperDoitOptionalOptionWithNoArg long: 'ssh'.
SuperDoitOptionalOptionWithNoArg long: 'https'.
SuperDoitOptionalOptionWithNoArg long: 'spec'.
}
%
usage
-----
USAGE $basename [--help | -h] [--debug | -D]  [--debugGem] \
                registry=<registry-name> --projectSet=<projectSet-name>
      $basename registry=<registry-name> --projectSet=<projectSet-name> \
                --from=gsdevkitProjectSpecs.ston --key=server --ssh
      $basename registry=<registry-name> --projectSet=<projectSet-name> \
                --from=gsdevkitProjectSpecs.ston --key=clientServer --https
      $basename registry=<registry-name> --projectSet=<projectSet-name> \
                --from=gsdevkitProjectSpecs.ston --key=clientServer --spec

DESCRIPTION
  A project set is a list of load specs that specify a group of git repositories that are managed together. 

OPTIONS
  -h, --help        display usage message
  -D, --debug       bring up topaz debugger in the event of a script error
  --debugGem        If terminal is connected to stdout, bring up debugger. If not,
                    dump stack to stdout and wait for topaz to attach using topaz
                    DEBUGGEM command.
  --registry=<registry-name>   
                    name of the registry. Default is /usr/bin/hostname
  --projectSet=<projectSet-name>
                    Name of the project set.

EXAMPLES
  $basename --help
  $basename -D
  $basename --debugGem
  $basename 
  $basename --registry=bosch --projectSet=shared
  $basename --registry=bosch --projectSet=gsdevkit_home --from=gsdevkitProjectSpecs.ston \
            --key=server --ssh 
  $basename --registry=bosch --projectSet=gsdevkit_home --from=gsdevkitProjectSpecs.ston \
            --key=clientServer --http
-----
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'GsDevKit_stones',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core',
		'Solo'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'Globals'
			}
		}
	},
	#comment : ''
}
]
%
method
populateProjectSet: projectSet type: type from: stonSpecDictionaryFilePath
	| specDictionary |
	specDictionary := stonSpecDictionaryFilePath asFileReference 
		readStreamDo: [:fileStream | 
			(STON reader on:  (ZnBufferedReadStream on:  fileStream)) next ].
	(specDictionary at: 'type') = 'gitUrlSpec'
		ifTrue: [ 
			projectSet populateProjectSetGitUrl: type from: (specDictionary at: self key) ]
		ifFalse: [self error: 'The dictionary of type ', type printString , ' is not supported.'].
%
doit
	| registryClass stonesRegistry name projectSet |
	self preDoitSpecLoad: [:spec |
		spec projectsHome: self dirname asFileReference parent parent].
	registryClass := (self globalNamed: 'GDKRegistry').	
	stonesRegistry := registryClass stonesRegistryNamed: self registry.
	name := self projectSet.
	projectSet := (self globalNamed: 'GDKProjectSet') newNamed: name inStonesRegistry: stonesRegistry.
	projectSet registryFile exists
		ifTrue: [
			| projectSetPath |
			projectSetPath := stonesRegistry projectSets at: name.
			projectSet := (self globalNamed: 'GDKProjectSet') 
				fromPath: projectSetPath
				ifAbsent: [ self error: 'Cannot find project set ', projectSetPath printString ] ]
		ifFalse: [	
			projectSet registryDir ensureCreateDirectory.
			projectSet export.
			stonesRegistry projectSets at: name put: projectSet registryPath.
			stonesRegistry export ].
  self from
		ifNotNil: [:stonSpecDictionaryFilePath |
			| type |
			type := self https
				ifTrue: [ 'https' ]
				ifFalse: [
					self ssh
						ifTrue: [ 'ssh' ]
						ifFalse: [ self error: 'Either --https or --ssh must be specified.' ] ]. 
			self populateProjectSet: projectSet type: type from: stonSpecDictionaryFilePath.
			projectSet export ].
	^ projectSet
%
