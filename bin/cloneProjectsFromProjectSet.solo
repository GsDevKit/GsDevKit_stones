#!/usr/bin/env superdoit_solo
options
{
SuperDoitRequiredOptionWithRequiredArg long: 'registry'.
SuperDoitRequiredOptionWithRequiredArg long: 'projectSet'.
SuperDoitOptionalOptionWithRequiredArg long: 'projectDirectory'.
SuperDoitOptionalOptionWithNoArg long: 'strict'.
}
%
usage
-----
USAGE $basename [--help | -h] [--debug | -D]  [--debugGem] registry=<registry-name> --projectSet=<projectSet-name> [--projectDirectory=<project-directory>]

DESCRIPTION
  A project set is a list of load specs  that specify a group of git repositories that are managed together. 

OPTIONS
  -h, --help        display usage message
  -D, --debug       bring up topaz debugger in the event of a script error
  --debugGem        If terminal is connected to stdout, bring up debugger. If not,
                    dump stack to stdout and wait for topaz to attach using topaz
                    DEBUGGEM command.
  --registry=<registry-name>   
                    name of the registry. Default is /usr/bin/hostname
  --projectSet=<projectSet-name>
                    Name of the project set to use.
  --projectDirectory=<project-directory>
                    Path to directory where the projects will be cloned. If not
                    specified the projectDirectory in the registry will be used.
  --strict          If present, a pull request will be issued for the origin remote
                    to update the repository to the latest version of the branch 
                    available.
  <project-name>...
                    List of project names in project to be cloned. If not specified
                    all of the projects in the project set will be cloned.

EXAMPLES
  $basename --help
  $basename -D
  $basename --debugGem
  $basename 
  $basename --registry=bosch --projectSet=dev Rowan \
            --projectDirectory=/home/dhenrich/bosch1/_exp_git
  $basename --registry=bosch --projectSet=test Rowan --strict 
-----
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'GsDevKit_stones',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core',
		'Solo'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'Globals'
			}
		}
	},
	#comment : ''
}
]
%
doit
	| registryClass stonesRegistry name projectSet projectSetPath projectDir |
	self preDoitSpecLoad: [:spec |
		spec projectsHome: self dirname asFileReference parent parent].

	registryClass := (self globalNamed: 'GDKRegistry').	
	stonesRegistry := registryClass stonesRegistryNamed: self registry.
	name := self projectSet.
	projectSetPath := stonesRegistry projectSets 
		at: name 
		ifAbsent: [ self error: 'Cannot find project set named ', name printString ].
	projectSet := (self globalNamed: 'GDKProjectSet') 
				fromPath: projectSetPath 
				ifAbsent: [ self error: 'Cannot find project set ', projectSetPath printString ].
	projectDir := self projectDirectory
		ifNotNil: [:dir |
			stonesRegistry projectDirectory: dir asFileReference fullName.
			stonesRegistry export.
			stonesRegistry projectDirectory ]
		ifNil: [ 
			stonesRegistry projectDirectory
				ifNil: [ self error: '--projectDirectory option must be used if no registry project directory defined' ] ].
	projectDir asFileReference ensureCreateDirectory. 
	Rowan projectTools trace startTracing.
	self positionalArgs size = 0
		ifTrue: [ projectSet cloneOrUpdateProjectSet: projectDir pull: self strict ]
		ifFalse: [ 
			self positionalArgs  do: [:projectName |
				projectSet cloneOrUpdateProject: projectName in: projectDir pull: self strict ] ].
	true
%
