#!/usr/bin/env superdoit_solo
options
{
SuperDoitOptionalOptionWithRequiredArg long: 'registry' short: 'r'.
SuperDoitOptionalOptionWithRequiredArg long: 'addKey'.
}
%
Usage
-----
USAGE $basename [--help | -h] [--debug | -D]  [--debugGem] [-v | --verbose] \
                [--registry=<registry-name> | -r <registry-name>] \
                <product-name>

DESCRIPTION
  Update the clientlibs directory using the named product for the registry.

OPTIONS
  -h, --help    display usage message
  -D, --debug   bring up topaz debugger in the event of a script error
  --debugGem    If terminal is connected to stdout, bring up debugger. If not,
                dump stack to stdout and wait for topaz to attach using topaz
                DEBUGGEM command.
  -v, --verbose Verbose logging enabled.
  --registry=<registry-name> | -r <registry-name> 
                <registry-name> is the name of the registry. Default is hostname.
  <product-name>
                Name of the product in <registry-name>

EXAMPLES
  $basename --help
  $basename --registry=bosch 370_rowanv3-Alpha1
  $basename -r bosch 370_rowanv3-Alpha1
-----
%
specs
[
RwLoadSpecificationV2 {
	#projectName : 'GsDevKit_stones',
	#projectSpecFile : 'rowan/project.ston',
	#componentNames : [
		'Core',
		'Solo'
	],
	#platformProperties : {
		'gemstone' : {
			'allusers' : {
				#defaultSymbolDictName : 'Globals'
			}
		}
	},
	#comment : ''
}
]
%
method
registryName
	^ self registry
		ifNil: [ (self globalNamed: 'System') hostname ]
		ifNotNil: [:value | value ].
%
doit
	| registryClass productName stonesRegistry productDirectory |
	self preDoitSpecLoad: [:spec | 
		spec projectsHome: self dirname asFileReference parent parent ].
	registryClass := (self globalNamed: 'GDKRegistry').	
	self positionalArgs size ~= 1
		ifTrue: [
			self error: 'Expected a single positional argument: <product-name>, not ', self positionalArgs size printString, ' positional arguments', ' (', self basename, ')' ].
	productName := self positionalArgs at: 1.
	stonesRegistry := registryClass stonesRegistryNamed: self registryName.
	stonesRegistry
		populateClientLibsIn: stonesRegistry productDirectory 
		fromProductNamed: productName
		ifAbsent: [ 
			self error: 'No product named ', productName printString, ' found in the the registry ', 
				self registryName printString,' (', self basename, ')' ].
	^ self noResult
%
